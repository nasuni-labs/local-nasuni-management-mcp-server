"""Tool registry for managing MCP tools."""

import sys
from typing import Dict, List, Any
from mcp.types import Tool, TextContent
from api.cloud_credentials_api import CloudCredentialsAPIClient
from api.volume_filer_details_api import VolumeFilerDetailsAPIClient
from tools.base_tool import BaseTool
from tools.filer_tools import ListFilersTool, GetFilerStatsTool, GetFilerTool
from tools.volume_tools import ListVolumesTool
from api.filers_api import FilersAPIClient
from api.volumes_api import VolumesAPIClient
from tools.auth_tools import RefreshTokenTool, CheckTokenStatusTool, EnsureValidTokenTool
from api.auth_api import AuthAPIClient


from tools.filer_health_tools import (
    ListFilerHealthTool, GetFilerHealthStatsTool, GetUnhealthyFilersTool,
    GetCriticalHealthIssuesTool, GetFilerHealthBySerialTool
)
from api.filer_health_api import FilerHealthAPIClient


class ToolRegistry:
    """Registry for managing MCP tools."""
    
    def __init__(self):
        self.tools: Dict[str, BaseTool] = {}
    
    def register_tool(self, tool: BaseTool):
        """Register a tool."""
        self.tools[tool.name] = tool
    
    def register_filer_tools(self, filers_client: FilersAPIClient):
        """Register all filer-related tools."""
        self.register_tool(ListFilersTool(filers_client))
        self.register_tool(GetFilerStatsTool(filers_client))
        self.register_tool(GetFilerTool(filers_client))
    
    def register_volume_tools(self, volumes_client: VolumesAPIClient, filers_client: FilersAPIClient):
        """Register all volume-related tools with enhanced location support."""
        
        # Core volume tools with improved functionality
        from tools.volume_tools import (
            ListVolumesTool,
            GetVolumesByLocationTool,
            GetVolumeLocationSummaryTool,
            GetVolumeStatsTool  # This exists in your file
        )
        
        self.register_tool(ListVolumesTool(volumes_client))
        self.register_tool(GetVolumesByLocationTool(volumes_client))
        self.register_tool(GetVolumeLocationSummaryTool(volumes_client))
        self.register_tool(GetVolumeStatsTool(volumes_client))

        from tools.volume_analyzer_tool import AnalyzeVolumeAttributeTool
        self.register_tool(AnalyzeVolumeAttributeTool(volumes_client))
        
        # Additional volume stats tools - CHECK THESE EXIST FIRST
        try:
            # Remove GetPublicVolumesTool since it doesn't exist
            # Only import tools that actually exist in your volume_tools.py
            pass  # No additional tools to import
        except ImportError as e:
            print(f"‚ö†Ô∏è Some volume tools not available: {e}", file=sys.stderr)
        
        # Enhanced volume access tools
        try:
            from tools.enhanced_volume_tools import (
                GetVolumeAccessByFilerTool,
                GetFilerAccessByVolumeTool
            )
            self.register_tool(GetVolumeAccessByFilerTool(volumes_client, filers_client))
            self.register_tool(GetFilerAccessByVolumeTool(volumes_client, filers_client))
            print("‚úÖ Enhanced volume access tools registered", file=sys.stderr)
        except ImportError as e:
            print(f"‚ö†Ô∏è Enhanced volume access tools not available: {e}", file=sys.stderr)
        
        # Volume ownership analysis tools
        try:
            from tools.ownership_tools import (
                GetVolumeOwnershipTool,
                GetRemoteAccessAnalysisTool
            )
            self.register_tool(GetVolumeOwnershipTool(volumes_client, filers_client))
            self.register_tool(GetRemoteAccessAnalysisTool(volumes_client, filers_client))
            print("‚úÖ Volume ownership analysis tools registered", file=sys.stderr)
        except ImportError as e:
            print(f"‚ö†Ô∏è Volume ownership tools not available: {e}", file=sys.stderr)

    
    def register_all_tools_if_available(self, volumes_client: VolumesAPIClient, filers_client: FilersAPIClient):
        """Register all available advanced tools with better error handling."""
        
        advanced_tools = [
            ("tools.enhanced_volume_tools", [
                ("GetVolumeAccessByFilerTool", "get_volume_access_by_filer"),
                ("GetFilerAccessByVolumeTool", "get_filer_access_by_volume")
            ]),
            ("tools.ownership_tools", [
                ("GetVolumeOwnershipTool", "get_volume_ownership_analysis"), 
                ("GetRemoteAccessAnalysisTool", "get_remote_access_analysis")
            ]),
            ("tools.volume_tools", [
                ("GetVolumeStatsTool", "get_volume_stats"),
                ("GetPublicVolumesTool", "get_public_volumes")
            ])
        ]
        
        registered_count = 0
        
        for module_name, tool_classes in advanced_tools:
            try:
                module = __import__(module_name, fromlist=[cls[0] for cls in tool_classes])
                
                for class_name, tool_name in tool_classes:
                    try:
                        tool_class = getattr(module, class_name)
                        tool_instance = tool_class(volumes_client, filers_client)
                        self.register_tool(tool_instance)
                        registered_count += 1
                        print(f"‚úÖ Registered: {tool_name}", file=sys.stderr)
                    except AttributeError:
                        print(f"‚ö†Ô∏è Tool class not found: {class_name}", file=sys.stderr)
                    except Exception as e:
                        print(f"‚ö†Ô∏è Failed to register {tool_name}: {e}", file=sys.stderr)
                        
            except ImportError as e:
                print(f"‚ö†Ô∏è Module not available: {module_name} - {e}", file=sys.stderr)
        
        print(f"üìä Total advanced tools registered: {registered_count}", file=sys.stderr)



    
    def register_share_tools(self, shares_client):
        """Register all share-related tools."""
        try:
            from api.shares_api import SharesAPIClient
            from tools.share_tools import (
                ListSharesTool, GetShareStatsTool, GetSharesByFilerTool,
                GetBrowserAccessibleSharesTool, GetSharesByVolumeTool
            )
            
            self.register_tool(ListSharesTool(shares_client))
            self.register_tool(GetShareStatsTool(shares_client))
            self.register_tool(GetSharesByFilerTool(shares_client))
            self.register_tool(GetBrowserAccessibleSharesTool(shares_client))
            self.register_tool(GetSharesByVolumeTool(shares_client))
            
            print("‚úÖ Share tools registered successfully", file=sys.stderr)
            
        except ImportError as e:
            print(f"‚ùå Failed to import share tools: {e}", file=sys.stderr)
        except Exception as e:
            print(f"‚ùå Error registering share tools: {e}", file=sys.stderr)
    
    def get_tool_list(self) -> List[Tool]:
        """Get list of all registered tools as MCP Tool objects."""
        return [tool.to_mcp_tool() for tool in self.tools.values()]
    
    async def execute_tool(self, name: str, arguments: Dict[str, Any]) -> List[TextContent]:
        """Execute a tool by name."""
        if name not in self.tools:
            return [TextContent(
                type="text",
                text=f"‚ùå Unknown tool: {name}. Available tools: {', '.join(self.tools.keys())}"
            )]
        
        tool = self.tools[name]
        
        # Validate arguments
        if not tool.validate_arguments(arguments):
            return [TextContent(
                type="text",
                text=f"‚ùå Invalid arguments for tool '{name}'. Expected schema: {tool.get_schema()}"
            )]
        
        return await tool.execute(arguments)
    
    def register_share_tools(self, shares_client):
        """Register all share-related tools."""
        registered_count = 0
        
        try:
            from api.shares_api import SharesAPIClient
            
            # Register basic share tools first
            try:
                from tools.share_tools import ListSharesTool
                self.register_tool(ListSharesTool(shares_client))
                registered_count += 1
                print("  ‚úÖ ListSharesTool registered", file=sys.stderr)
            except ImportError as e:
                print(f"  ‚ö†Ô∏è Could not import ListSharesTool: {e}", file=sys.stderr)
            
            try:
                from tools.share_tools import GetShareStatsTool
                self.register_tool(GetShareStatsTool(shares_client))
                registered_count += 1
                print("  ‚úÖ GetShareStatsTool registered", file=sys.stderr)
            except ImportError as e:
                print(f"  ‚ö†Ô∏è Could not import GetShareStatsTool: {e}", file=sys.stderr)
            
            try:
                from tools.share_tools import GetSharesByFilerTool
                self.register_tool(GetSharesByFilerTool(shares_client))
                registered_count += 1
                print("  ‚úÖ GetSharesByFilerTool registered", file=sys.stderr)
            except ImportError as e:
                print(f"  ‚ö†Ô∏è Could not import GetSharesByFilerTool: {e}", file=sys.stderr)
            
            try:
                from tools.share_tools import GetBrowserAccessibleSharesTool
                self.register_tool(GetBrowserAccessibleSharesTool(shares_client))
                registered_count += 1
                print("  ‚úÖ GetBrowserAccessibleSharesTool registered", file=sys.stderr)
            except ImportError as e:
                print(f"  ‚ö†Ô∏è Could not import GetBrowserAccessibleSharesTool: {e}", file=sys.stderr)
            
            try:
                from tools.share_tools import GetSharesByVolumeTool
                self.register_tool(GetSharesByVolumeTool(shares_client))
                registered_count += 1
                print("  ‚úÖ GetSharesByVolumeTool registered", file=sys.stderr)
            except ImportError as e:
                print(f"  ‚ö†Ô∏è Could not import GetSharesByVolumeTool: {e}", file=sys.stderr)
            
            # Try to register new/optional tools (these might not exist yet)
            try:
                from tools.share_tools import GetSharesPreviousVersionsTool
                self.register_tool(GetSharesPreviousVersionsTool(shares_client))
                registered_count += 1
                print("  ‚úÖ GetSharesPreviousVersionsTool registered", file=sys.stderr)
            except ImportError:
                # This tool might not exist yet, that's okay
                pass
            
            try:
                from tools.share_tools import ListSharesRawTool
                self.register_tool(ListSharesRawTool(shares_client))
                registered_count += 1
                print("  ‚úÖ ListSharesRawTool registered", file=sys.stderr)
            except ImportError:
                pass
            
            try:
                from tools.share_tools import AnalyzeShareFieldTool
                self.register_tool(AnalyzeShareFieldTool(shares_client))
                registered_count += 1
                print("  ‚úÖ AnalyzeShareFieldTool registered", file=sys.stderr)
            except ImportError:
                pass
            
            if registered_count > 0:
                print(f"‚úÖ {registered_count} share tools registered successfully", file=sys.stderr)
            else:
                print("‚ùå No share tools could be registered", file=sys.stderr)
                
        except ImportError as e:
            print(f"‚ùå Failed to import shares API: {e}", file=sys.stderr)
        except Exception as e:
            print(f"‚ùå Error registering share tools: {e}", file=sys.stderr)
    
    def get_tool_names(self) -> List[str]:
        """Get list of registered tool names."""
        return list(self.tools.keys())
    
    def get_tool(self, name: str) -> BaseTool:
        """Get a specific tool by name."""
        return self.tools.get(name)
    
    def register_filer_health_tools(self, filer_health_client: FilerHealthAPIClient):
        """Register all filer health-related tools."""
        self.register_tool(ListFilerHealthTool(filer_health_client))
        self.register_tool(GetFilerHealthStatsTool(filer_health_client))
        self.register_tool(GetUnhealthyFilersTool(filer_health_client))
        self.register_tool(GetCriticalHealthIssuesTool(filer_health_client))
        self.register_tool(GetFilerHealthBySerialTool(filer_health_client))

    def register_auth_tools(self, auth_client: AuthAPIClient):
        """Register all authentication-related tools."""
        self.register_tool(RefreshTokenTool(auth_client))
        self.register_tool(CheckTokenStatusTool(auth_client))
        self.register_tool(EnsureValidTokenTool(auth_client))

    def register_cloud_credential_tools(self, cloud_creds_client: CloudCredentialsAPIClient, volumes_client: VolumesAPIClient = None):
        """Register all cloud credential-related tools."""
        from tools.cloud_credential_tools import (
            ListCloudCredentialsTool,
            GetCredentialStatsTool,
            GetCredentialsByFilerTool,
            GetCredentialUsageAnalysisTool,
            GetInactiveCredentialsTool
        )
        
        self.register_tool(ListCloudCredentialsTool(cloud_creds_client))
        self.register_tool(GetCredentialStatsTool(cloud_creds_client))
        self.register_tool(GetCredentialsByFilerTool(cloud_creds_client))
        self.register_tool(GetInactiveCredentialsTool(cloud_creds_client))
        
        # Register usage analysis tool with volumes client if available
        if volumes_client:
            self.register_tool(GetCredentialUsageAnalysisTool(cloud_creds_client, volumes_client))
            print("‚úÖ Cloud credential tools registered with volume analysis", file=sys.stderr)
        else:
            self.register_tool(GetCredentialUsageAnalysisTool(cloud_creds_client, None))
            print("‚úÖ Cloud credential tools registered (without volume analysis)", file=sys.stderr)


    def register_notification_tools(self, notifications_client):
        """Register all notification-related tools."""
        try:
            from api.notifications_api import NotificationsAPIClient
            from tools.notification_tools import (
                ListNotificationsTool,
                GetNotificationSummaryTool,
                AnalyzeNotificationPatternsTool
            )
            
            self.register_tool(ListNotificationsTool(notifications_client))
            self.register_tool(GetNotificationSummaryTool(notifications_client))
            self.register_tool(AnalyzeNotificationPatternsTool(notifications_client))
            
            print("‚úÖ Notification tools registered successfully", file=sys.stderr)
            
        except ImportError as e:
            print(f"‚ùå Failed to import notification tools: {e}", file=sys.stderr)
        except Exception as e:
            print(f"‚ùå Error registering notification tools: {e}", file=sys.stderr)





    def register_volume_filer_details_tools(self, volume_filer_api, volumes_api):
        """Register all volume-filer details tools with comprehensive operational coverage."""
        try:
            from tools.volume_filer_details_tools import (
                GetVolumeFilerDetailsTool,
                ListAllVolumeFilerDetailsTool,
                AnalyzeVolumeOperationsTool,  # Renamed from AnalyzeVolumeFilerSecurityTool
                GetVolumeFilerSummaryStatsTool,
                FindUnprotectedDataTool,
                GetDataProtectionSummaryTool
            )
            
            # Import specialized operation tools
            from tools.specialized_operation_tools import (
                AnalyzeSnapshotOperationsTool,
                AnalyzeSyncOperationsTool,
                AnalyzeDataProtectionTool,
                AnalyzeAuditingOperationsTool
            )
            
            # Register core volume-filer details tools
            self.register_tool(GetVolumeFilerDetailsTool(volume_filer_api))
            self.register_tool(ListAllVolumeFilerDetailsTool(volume_filer_api, volumes_api))
            self.register_tool(AnalyzeVolumeOperationsTool(volume_filer_api, volumes_api))  # Renamed tool
            self.register_tool(GetVolumeFilerSummaryStatsTool(volume_filer_api, volumes_api))
            
            # Register unprotected data analysis tools
            self.register_tool(FindUnprotectedDataTool(volume_filer_api, volumes_api))
            self.register_tool(GetDataProtectionSummaryTool(volume_filer_api, volumes_api))
            
            # Register specialized operation tools
            self.register_tool(AnalyzeSnapshotOperationsTool(volume_filer_api, volumes_api))
            self.register_tool(AnalyzeSyncOperationsTool(volume_filer_api, volumes_api))
            self.register_tool(AnalyzeDataProtectionTool(volume_filer_api, volumes_api))
            self.register_tool(AnalyzeAuditingOperationsTool(volume_filer_api, volumes_api))
            
            print("‚úÖ Volume-Filer Details tools registered successfully", file=sys.stderr)
            print("‚úÖ Unprotected Data Analysis tools registered successfully", file=sys.stderr)
            print("‚úÖ Specialized Operation Analysis tools registered successfully", file=sys.stderr)
            print(f"üìä Total Volume-Filer tools: 10", file=sys.stderr)
            
        except ImportError as e:
            print(f"‚ö†Ô∏è Some Volume-Filer Details tools not available: {e}", file=sys.stderr)
            print("   Make sure specialized_operation_tools.py exists with all required tools", file=sys.stderr)



    def register_management_tools(self):
        """Register server management tools."""
        from tools.management_tools import ManageServerInstructionsTool
        self.register_tool(ManageServerInstructionsTool())